import argparse

start_sign = ["a{}", "b{}"]
zero_sign = "."
state_x = 4
state_y = 3
state_z = 32
state_xyz = state_x*state_y*state_z

def check_start_sign(s: str, ROUNDS: int) -> bool:
    """check if s contains start sign

    Args:
        s (str): input string
        ROUNDS (int): number of rounds

    Returns:
        bool: whether s contains start sign
    """
    for r in range(1, ROUNDS+1):
        # if s contains "ai"
        if s.find(start_sign[0].format(r)) >= 0:
            return True
    # if s contains "b_{r-1}"
    return s.find(start_sign[1].format(0)) >= 0

def read_sol(path: str, ROUNDS: int) -> list:
    """read solution from solution file generated by XoodooSat

    Args:
        path (str): solution file path
        ROUNDS (int): number of rounds

    Returns:
        list: all the solution trails
    """
    f = open(path, "r")
    contents = f.readlines()
    f.close()

    trails = [] # 122*3*384
    trail = []  # 3*384
    i = 0
    while i < len(contents):
        line = contents[i].rstrip("\n")
        i += 1
        # find start sign of a state
        if not check_start_sign(line, ROUNDS):
            continue
        # start from the next line of start sign, i already += 1
        # 4 lines = 1 state
        state = [0 for _ in range(state_xyz)]
        for x in range(state_x):
            line = contents[i].rstrip("\n")
            # 1 line = 32 columns
            for z in range(state_z):
                # convert each column to bits
                col = 0 if line[z] == zero_sign else int(line[z])
                for y in range(state_y):
                    state[state_z*state_x*y + state_z*x + z] = (col >> y) & 0x1
            i += 1
        trail.append(state)
        if len(trail) == ROUNDS + 1:
            trails.append(trail)
            trail = []
    return trails

if __name__ == "__main__":
    parse = argparse.ArgumentParser(description="read solutions")
    parse.add_argument("-f", "--file", type=str, 
                    default="/home/user/anonymous/bosphorus/xoodoo/3rxoodoo/3rxoomess/dc.txt", help="solution file")
    parse.add_argument("-r", "--rounds", type=int, default=3, help="rounds of the solution")
    args = parse.parse_args()

    sol = read_sol(args.file, args.rounds)